loadrt [KINS]KINEMATICS
show comp

# motion controller, get name and thread periods from INI file
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS


#Setting up Ethercat stuff
loadusr -W lcec_conf /home/panzinod/Downloads/ethercat-conf.xml
loadrt lcec
loadrt cia402

#Load PID controllers for all 5 axes.
loadrt pid names=x-pid, y-pid, z-pid, a-pid, c-pid




# load velocity and acceleration
loadrt ddt names=ddt_x, ddt_xv, ddt_y, ddt_yv, ddt_z, ddt_zv, ddt_a, ddt_av, ddt_c, ddt_cv

# Also do some cartesian velocities
loadrt hypot names=vel_xy, vel_xyz

# add everything to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread

addf ddt_x servo-thread
addf ddt_xv servo-thread
addf ddt_y servo-thread
addf ddt_yv servo-thread
addf ddt_z servo-thread
addf ddt_zv servo-thread
addf ddt_a servo-thread
addf ddt_av servo-thread
addf ddt_c servo-thread
addf ddt_cv servo-thread
addf vel_xy servo-thread
addf vel_xyz servo-thread

addf lcec.read-all servo-thread
addf cia402.0.read-all servo-thread
addf cia402.0.write-all servo-thread
addf lcec.write-all servo-thread

addf x-pid.do-pid-calcs servo-thread
addf y-pid.do-pid-calcs servo-thread
addf z-pid.do-pid-calcs servo-thread
addf a-pid.do-pid-calcs servo-thread
addf c-pid.do-pid-calcs servo-thread



#Wire up the differentiators for velocity and acceleration 
net Xvel ddt_x.out => ddt_xv.in vel_xy.in0
net Xacc <= ddt_xv.out
net Yvel ddt_y.out => ddt_yv.in vel_xy.in1
net Yacc <= ddt_yv.out
net Zvel ddt_z.out => ddt_zv.in vel_xyz.in0
net Zacc <= ddt_zv.out
net Avel ddt_a.out => ddt_av.in
net Aacc <= ddt_av.out
net Cvel ddt_c.out => ddt_cv.in
net Cacc <= ddt_cv.out
net XYvel vel_xy.out => vel_xyz.in1
net XYZvel <= vel_xyz.out


#This is a loopback but I don't know how it's intended to be used? Probably an aux contact?
#net emc-enable => iocontrol.0.emc-enable-in
#sets emc-enable 1

########################################################################################################################
#################################      X-Axis Setup       #############################################################
########################################################################################################################

#Setting up the X Axis Servo
setp cia402.0.csp-mode 1
setp cia402.0.pos-scale 869046

#All the stuff where the ethercat drive needs to inform the CIA402 layer of what's going on
net x-statusword lcec.0.0.cia-statusword => cia402.0.statusword
net x-opmode-display lcec.0.0.opmode-display => cia402.0.opmode-display
net x-drv-act-pos lcec.0.0.actual-position => cia402.0.drv-actual-position
net x-drv-act-velo lcec.0.0.actual-velocity => cia402.0.drv-actual-velocity

#All the stuff where the CIA402 layer need to tell the ethercat drive what to do
net x-controlword     cia402.0.controlword => lcec.0.0.cia-controlword
net x-modes-of-operastion cia402.0.opmode => lcec.0.0.opmode
net x-drv-target-pos  cia402.0.drv-target-position => lcec.0.0.target-position
net x-drv-target-velo cia402.0.drv-target-velocity => lcec.0.0.target-velocity

#The interactions with LinuxCNC more broadly
net x-enable <= joint.0.amp-enable-out => cia402.0.enable
net x-amp-fault => joint.0.amp-fault-in <= cia402.0.drv-fault
net Xpos <= joint.0.motor-pos-cmd => cia402.0.pos-cmd
net x-pos-fb => joint.0.motor-pos-fb ddt_x.in <= cia402.0.pos-fb



########################################################################################################################
#################################      Simulation Zone       ###########################################################
########################################################################################################################

#THIS IS FOR SIMULATION
# create HAL signals for position commands from motion module
# loop position commands back to motion module feedback
net J0pos joint.0.motor-pos-cmd => joint.0.motor-pos-fb
net J1pos joint.1.motor-pos-cmd => joint.1.motor-pos-fb
net J2pos joint.2.motor-pos-cmd => joint.2.motor-pos-fb
net J3pos joint.3.motor-pos-cmd => joint.3.motor-pos-fb

#THIS IS FOR SIMULATION
# estop loopback
net estop-loop iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in

#THIS IS FOR SIMULATION
# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed





# amp control - these nets are not used, but are placeholders for
# converting this sample config to actual machines
net J0ena <= joint.0.amp-enable-out
net J1ena <= joint.1.amp-enable-out
net J2ena <= joint.2.amp-enable-out
net J3ena <= joint.3.amp-enable-out

net J0flt => joint.0.amp-fault-in
net J1flt => joint.1.amp-fault-in
net J2flt => joint.2.amp-fault-in
net J3flt => joint.3.amp-fault-in
